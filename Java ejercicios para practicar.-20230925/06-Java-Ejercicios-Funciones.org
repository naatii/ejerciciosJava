#+TITLE:
#+AUTHOR:
#+EMAIL:
#+DATE:
#+OPTIONS: texht:t toc:nil num:nil -:nil ^:{} ":nil ':nil
#+OPTIONS: tex:t
#+LATEX_CLASS: article
#+LATEX_HEADER:
#+LANGUAGE: es

#+BEGIN_COMMENT
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+END_COMMENT

#+LATEX_HEADER_EXTRA: \usepackage{mdframed}
#+LATEX_HEADER_EXTRA: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER_EXTRA: \AfterEndEnvironment{minted}{\end{mdframed}}

#+LATEX: \setlength\parindent{10pt}
#+LATEX_HEADER: \usepackage{parskip}

#+latex_header: \usepackage[utf8]{inputenc} %% For unicode chars
#+LATEX_HEADER: \usepackage{placeins}

#+LATEX_HEADER: \usepackage[margin=2.50cm]{geometry}

#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \usepackage[scaled]{helvet}
#+LaTeX_HEADER: \usepackage{courier}

#+LaTeX_HEADER: \hypersetup{colorlinks=true,linkcolor=blue}
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}

* Java: Eercicios de Funciones

** Ejercicio 1-14
Crea una biblioteca de funciones matemáticas que contenga las siguientes
funciones. Recuerda que puedes usar unas dentro de otras si es necesario.
    1. esCapicua: Devuelve verdadero si el número que se pasa como pará-
    metro es capicúa y falso en caso contrario.
    2. esPrimo: Devuelve verdadero si el número que se pasa como parámetro
    es primo y falso en caso contrario.
    3. siguientePrimo: Devuelve el menor primo que es mayor al número que
    se pasa como parámetro.
    4. potencia: Dada una base y un exponente devuelve la potencia.
    5. digitos: Cuenta el número de dígitos de un número entero.
    6. voltea: Le da la vuelta a un número.
    7. digitoN: Devuelve el dígito que está en la posición n de un número
    entero. Se empieza contando por el 0 y de izquierda a derecha.
    8. posicionDeDigito: Da la posición de la primera ocurrencia de un dígito
    dentro de un número entero. Si no se encuentra, devuelve -1.
    9. quitaPorDetras: Le quita a un número n dígitos por detrás (por la
    derecha).
    10. quitaPorDelante: Le quita a un número n dígitos por delante (por la
    izquierda).
    11. pegaPorDetras: Añade un dígito a un número por detrás.
    12. pegaPorDelante: Añade un dígito a un número por delante.
    13. trozoDeNumero: Toma como parámetros las posiciones inicial y final
    dentro de un número y devuelve el trozo correspondiente.
    14. juntaNumeros: Pega dos números para formar uno.

** Ejercicio 15
Muestra los números primos que hay entre 1 y 1000.

** Ejercicio 16
Muestra los números capicúa que hay entre 1 y 99999.

** Ejercicio 17
Escribe un programa que pase de binario a decimal.

** Ejercicio 18
Escribe un programa que pase de decimal a binario.

** Ejercicio 19
Une y amplía los dos programas anteriores de tal forma que se permita
convertir un número entre cualquiera de las siguientes bases: decimal, binario,
hexadecimal y octal.

** Ejercicio 20-28
Crea una biblioteca de funciones para arrays (de una dimensión) de números
enteros que contenga las siguientes funciones:
    1. generaArrayInt: Genera un array de tamaño n con números aleatorios
    cuyo intervalo (mínimo y máximo) se indica como parámetro.
    2. minimoArrayInt: Devuelve el mínimo del array que se pasa como
    parámetro.
    3. maximoArrayInt: Devuelve el máximo del array que se pasa como
    parámetro.
    4. mediaArrayInt: Devuelve la media del array que se pasa como pará-
    metro.
    5. estaEnArrayInt: Dice si un número está o no dentro de un array.
    6. posicionEnArray: Busca un número en un array y devuelve la posición
    (el índice) en la que se encuentra.
    7. volteaArrayInt: Le da la vuelta a un array.
    8. rotaDerechaArrayInt: Rota n posiciones a la derecha los números de
    un array.
    9. rotaIzquierdaArrayInt: Rota n posiciones a la izquierda los números de
    un array.

** Ejercicio 29-34
Crea una biblioteca de funciones para arrays bidimensionales (de dos dimen-
siones) de números enteros que contenga las siguientes funciones:
    1. generaArrayBiInt: Genera un array de tamaño n x m con números
    aleatorios cuyo intervalo (mínimo y máximo) se indica como parámetro.
    2. filaDeArrayBiInt: Devuelve la fila i-ésima del array que se pasa como
    parámetro.
    3. columnaDeArrayBiInt: Devuelve la columna j-ésima del array que se
    pasa como parámetro.
    4. coordenadasEnArrayBiInt: Devuelve la fila y la columna (en un array
    con dos elementos) de la primera ocurrencia de un número dentro de un
    array bidimensional. Si el número no se encuentra en el array, la función
    devuelve el array {-1, -1}.
    5. esPuntoDeSilla: Dice si un número es o no punto de silla, es decir,
    mínimo en su fila y máximo en su columna.
    6. diagonal: Devuelve un array que contiene una de las diagonales del
    array bidimensional que se pasa como parámetro. Se pasan como
    parámetros fila, columna y dirección. La fila y la columna determinan
    el número que marcará las dos posibles diagonales dentro del array. La
    dirección es una cadena de caracteres que puede ser “nose” o “neso”. La
    cadena “nose” indica que se elige la diagonal que va del noroeste hacia
    el sureste, mientras que la cadena “neso” indica que se elige la diagonal
    que va del noreste hacia el suroeste.
